@use "sass:list";
@use "sass:map";
@use "./lib.scss" as lib;
@use "./utils.scss" as utils;

// Configuration variables
$body: (
    "color": "dark",
) !default;
$prefix: lib.$default-prefix !default; //Custom prefix for components and variables
$theme: utils.create-empty-map() !default; //Custom theme
$variants: utils.create-empty-map() !default; //Custom variants
//$presets: utils.create-empty-list() !default; //Presets to load
$plugins: utils.create-empty-list() !default; //Plugins to load
//$include: utils.create-empty-list() !default; //List of components to include
$exclude: utils.create-empty-list() !default; //List of plugins to exclude

// Initialize sheet configuration
$sheet: lib.create-sheet();
$sheet: map.set($sheet, "prefix", $prefix); // Assign prefix
$sheet: map.set($sheet, "theme", lib.parse-theme($theme)); // Assign theme config

// Helper method to check if a plugin should be included
@function should-include-plugin($plugin) {
    $plugin-name: utils.get($plugin, "name", null);
    //$plugin-type: utils.get($plugin, "type", null);
    @if not lib.is-plugin($plugin) or $plugin-name == null {
        @return false; //Not valid plugin
    }
    //@if list.index($exclude, "*") or list.index($exclude, $plugin-name) {
    @if list.index($exclude, $plugin-name) {
        @return false;
    }
    // Include this plugin
    @return true;
}

// Register global variables
@each $key,$name in lib.$theme-mappings {
    @each $theme-key,$theme-value in utils.get($sheet, ("theme" $key)) {
        $theme-varname: lib.get-varname((
            "prefix": map.get($sheet, "prefix"),
            "variable": "#{$name}#{$theme-key}",
        ));
        // Register variable name
        $sheet: lib.add-variable-to-sheet($sheet, $theme-varname, $theme-value);
    }
}

// Register body styles
// TODO

// Register plugins
@each $plugin in  utils.flatten($plugins) {
    //$plugin: list.nth($plugins, $index);
    @if should-include-plugin($plugin) {
        $plugin-name: map.get($plugin, "name");
        // Check for component plugin
        @if lib.is-component-plugin($plugin) {
            $plugin-variants: utils.get($plugin, "variants", utils.create-empty-map());
            // Check for custom variants provided
            $custom-variants: utils.get($variants, $plugin-name, null);
            @if utils.is-map($custom-variants) {
                $plugin-variants: $custom-variants;
            }
            //$plugin-prefix: utils.get($plugin, "prefix", null);
            $sheet: lib.build-component-styles($sheet, (
                "name": $plugin-name,
                "prefix": utils.get($plugin, "prefix", null),
                "styles": utils.get($plugin, "styles", utils.create-empty-map()),
                "variants": $plugin-variants,
            ));
        }
        // Check for utility plugin
        @if lib.is-utility-plugin($plugin) {
            //TODO
        }
    }
}

// Compile sheet
@include lib.compile-sheet($sheet);

