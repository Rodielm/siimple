@use "sass:map";
@use "./utils.scss" as utils;

// Naming global variables
$default-prefix: "siimple-"; // Default prefix for components and variables

// @description Generate classname for helper
// @option name: name of the helper
// @option property: property of the helper
// @option state: state of the helper (default, hover, active)
// @option breakpoint: responsive breakpoint
@function get-helper-classname($options) {
    $classname: ".has-#{map.get($options, "name")}";
    $property: map.get($options, "property");
    @if $property != "default" {
        $classname: "#{$classname}-#{$property}";
    }
    // Check for breakpoint provided
    $breakpoint: utils.get-in($options, "breakpoint", null);
    @if utils.is-string($breakpoint) {
        @return "#{$classname}\\:#{$breakpoint}";
    }
    // Apply for state
    $state: utils.get-in($options, "state", "default");
    @if $state == "hover" {
        @return "#{$classname}\\:hover:hover";
    }
    // Default --> return the default helper class
    //@return ".has-#{$name}-#{$property}";
    @return $classname;
}

// @description Generate component classname
@function get-component-classname($options) {
    // Generate the component name
    $prefix: utils.get-in($options, "prefix", "");
    // @if not utils.is-string($prefix) {
    //     $prefix: $default-prefix;
    // }
    $name: utils.get-in($options, "name", null);
    $modifier: utils.get-in($options, "modifier", null);
    @if utils.is-string($name) and utils.is-string($modifier) {
        @return ".#{$prefix}#{$name}.is-#{$modifier}";
    }
    @else if utils.is-string($name) {
        @return ".#{$prefix}#{$name}";
    }
    @else if utils.is-string($modifier) {
        @return ".is-#{$modifier}";
    }
    // Other value --> return empty classname
    @return "";
}

// Generate a variable name
@function get-varname($options) {
    // Check for variable name provided
    $name: utils.get-in($options, "name", null);
    $prefix: utils.get-in($options, "prefix", "");
    // @if not utils.is-string($prefix) {
    //     $prefix: $default-prefix;
    // }
    @if utils.is-string($name) {
        @return "#{$prefix}#{$name}";
    }
    // Other value --> return empty varname
    @return "";
}

