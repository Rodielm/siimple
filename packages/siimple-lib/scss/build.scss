@use "sass:list";
@use "sass:map";
@use "./breakpoints.scss" as breakpoints;
@use "./constants.scss" as constants;
@use "./naming.scss" as naming;
@use "./scales.scss" as scales;
@use "./selectors.scss" as selectors;
@use "./variants.scss" as variants;
@use "./utils.scss" as utils;

// @description Build component styles
@mixin component ($component) {
    $sheet: sheet.create-sheet();
    $component-name: utils.get-in($component, "name", "");
    $component-classname: naming.get-component-classname($component-name);
    //$sheet: sheet.add-classname-to-sheet($sheet, $component-name, $component-classname);
    $sheet: sheet.add-styles-to-sheet($sheet, $component-classname, map.get($component, "styles"));
    //Register fonts (if provided)
    $component-fonts: utils.get-in($component, "fonts", null);
    @if utils.is-map($component-fonts) {
        @each $font-name, $font-options in $component-fonts {
            $sheet: sheet.add-font-to-sheet($sheet, $font-name, $font-options);
        }
    }
    //Register component keyframes
    $component-keyframes: utils.get-in($components, "keyframes", null);
    @if utils.is-map($component-keyframes) {
        @each $name, $keyframes in $component-keyframes {
            $sheet: sheet.add-keyframes-to-sheet($sheet, $name, $keyframes);
        }
    }
    // Compile sheet
    @include sheet.compile-sheet($sheet);
}

// @description Build a helper styles
@mixin helper ($helper) {
    $helper-name: map.get($helper, "name");
    $helper-properties: map.get($helper, "properties");
    $helper-values: utils.empty-map();
    $helper-scale: utils.get-in($helper, "scale", null);
    $helper-important: utils.get-in($helper, "important", false);
    // Check if we need to get values from scales
    @if $helper-scale {
        @if scales.has-scale($helper-scale) {
            $helper-values: scales.get-scale($helper-scale);
        }
    }
    // Check for custom values to merge
    @if map.has-key($helper, "values") {
        $helper-values: map.merge($helper-values, map.get($helper, "values"));
    }
    $helper-responsive: utils.get-in($helper, "responsive", false);
    $helper-states: utils.get-in($helper, "states", null);
    @if not utils.is-list($helper-states) {
        $helper-states: ("default");
    }
    // Generate styles for this helper
    @each $key,$value in $helper-values {
        // Register helpers classes for each state
        @each $state in $helper-states {
            $classname: naming.get-helper-classname((
                "name": $helper-name,
                "property": $key,
                "state": $state,
            ));
            //$sheet: sheet.add-styles-to-sheet($sheet, $classname, $styles);
            @include selectors.use-state-selector($classname, $state) {
                @each $prop in $helper-properties {
                    @include scales.use-scale($prop, $value, $helper-important);
                }
            }
        }
        // For responsive variants, we will register the style
        // for each breakpoint in the list of breakpoints
        @if $helper-responsive {
            @include breakpoints.use-breakpoints using ($breakpoint) {
                $classname: naming.get-helper-classname((
                    "name": $helper-name,
                    "property": $key,
                    "breakpoint": $breakpoint,
                ));
                #{$classname} {
                    @each $prop in $helper-properties {
                        @include scales.use-scale($prop, $value, $helper-important);
                    }
                }
            }
        }
        //@debug map.get($sheet, "styles");
    }
}


