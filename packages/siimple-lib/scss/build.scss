@use "sass:list";
@use "sass:map";

@use "./breakpoints.scss" as breakpoints;
@use "./constants.scss" as constants;
@use "./naming.scss" as naming;
@use "./plugins.scss" as plugins;
@use "./sheet.scss" as sheet;
@use "./theme.scss" as theme;
@use "./utils.scss" as utils;

// Helper method to check if a plugin should be included
//@function should-include-plugin($plugin, $exclude) {
//    $plugin-name: utils.get-in($plugin, "name", null);
//    //$plugin-type: utils.get($plugin, "type", null);
//    @if not plugins.is-plugin($plugin) or $plugin-name == null {
//        @return false; //Not valid plugin
//    }
//    //@if list.index($exclude, "*") or list.index($exclude, $plugin-name) {
//    @if list.index($exclude, $plugin-name) {
//        @return false;
//    }
//    // Include this plugin
//    @return true;
//}

// Build siimple mixin
@mixin build($options: ()) {
    $prefix: utils.get-in($options, "prefix", "siimple-");
    $theme: utils.get-in($options, "theme", utils.empty-map());
    $body: utils.get-in($options, "body", utils.empty-map());
    //$presets: utils.empty-list() !default; //Presets to load
    $breakpoints: utils.get-in($options, "breakpoints", utils.empty-map());
    $plugins: utils.get-in($options, "plugins", ());
    $variants: utils.get-in($options, "variants", utils.empty-map());
    //$include: utils.empty-list() !default; //List of components to include
    //$exclude: utils.get-in($options, "exclude", ());

    // Initialize sheet configuration
    $sheet: sheet.create-sheet();
    $sheet: map.set($sheet, "prefix", $prefix); // Assign prefix
    $sheet: map.set($sheet, "theme", theme.parse-theme($theme)); // Assign theme config
    $sheet: map.set($sheet, "breakpoints", breakpoints.parse-breakpoints($breakpoints));

    // Register global variables
    @each $key,$name in constants.$theme-mappings {
        @each $theme-key,$theme-value in utils.get-in($sheet, ("theme" $key)) {
            $theme-varname: naming.get-varname((
                "prefix": map.get($sheet, "prefix"),
                "variable": "#{$name}#{$theme-key}",
            ));
            // Register variable name
            $sheet: sheet.add-variable-to-sheet($sheet, $theme-varname, $theme-value);
        }
    }

    // Register body styles
    // TODO

    // Register plugins
    @each $plugin in utils.flatten($plugins) {
        //$plugin: list.nth($plugins, $index);
        $plugin-name: map.get($plugin, "name");
        // Check for component plugin
        @if plugins.is-component-plugin($plugin) {
            $plugin-variants: utils.get-in($plugin, "variants", utils.empty-map());
            // Check for custom variants provided
            $custom-variants: utils.get-in($variants, $plugin-name, null);
            @if utils.is-map($custom-variants) {
                $plugin-variants: $custom-variants;
            }
            //$plugin-prefix: utils.get($plugin, "prefix", null);
            $sheet: build-component-styles($sheet, (
                "name": $plugin-name,
                "prefix": utils.get-in($plugin, "prefix", null),
                "styles": utils.get-in($plugin, "styles", utils.empty-map()),
                "variants": $plugin-variants,
                //"keyframes": utils.get-in($plugin, "keyframes", null),
            ));
        }
        // Check for utility plugin
        @else if plugins.is-utility-plugin($plugin) {
            //TODO
        }
        // Check for font plugin
        @else if plugins.is-font-plugin($plugin) {
            $sheet: sheet.add-font-to-sheet($sheet, $plugin);
        }
        // Check for keyframes plugin
        @else if plugins.is-keyframes-plugin($plugin) {
            $sheet: sheet.add-keyframes-to-sheet($sheet, $plugin);
        }
    }

    // Compile sheet
    @include sheet.compile-sheet($sheet);
}

// Build component styles
@function build-component-styles($sheet, $component) {
    $component-name: utils.get-in($component, "name", "");
    $component-prefix: utils.get-in($component, "prefix", null);
    @if not utils.is-string($component-prefix) {
        $component-prefix: map.get($sheet, "prefix");
    }
    $component-classname: naming.get-classname((
        "component": $component-name,
        "prefix": $component-prefix,
    ));
    //$sheet: sheet.add-classname-to-sheet($sheet, $component-name, $component-classname);
    $sheet: sheet.add-styles-to-sheet($sheet, $component-classname, map.get($component, "styles"));
    // Register each variant style
    //$component-variants: utils.get-in($component, "variants", utils.create-empty-map());
    @each $variant-name,$variant-styles in map.get($component, "variants") {
        $variant-classname: $component-classname; // Default variant classname is component classname
        @if $variant-name != "default" {
            $variant-classname: naming.get-classname((
                "component": $component-name,
                "variant": $variant-name,
                "prefix": $component-prefix,
            ));
            //$variant-name: $component-name + "." + $variant-name;
            // Register this variant class
            //$sheet: sheet.add-classname-to-sheet($sheet, $variant-name, $variant-classname);
        }
        // Register styles for this variant
        $sheet: sheet.add-styles-to-sheet($sheet, $variant-classname, $variant-styles);
    }
    //Return the updated sheet
    @return $sheet;
}


