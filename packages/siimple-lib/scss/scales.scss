@use "sass:map";
@use "./utils.scss" as utils;
@use "./constants.scss" as constants;

// Backgrounds configuration
// Used for backgrounds and borders
$backgrounds-scale: (
    "body": constants.$white,
    "fill": constants.$light,
    "primary": constants.$primary,
    "secondary": constants.$secondary,
    "highlight": constants.$highlight,
    "dark": constants.$dark,
    "light": constants.$light,
);

// Colors configuration
// Primary, text, background, muted and accent colors are required
$colors-scale: (
    "primary": constants.$primary,
    "secondary": constants.$secondary,
    "accent": constants.$accent,
    "body": constants.$dark,
    "heading": constants.$dark,
    "muted": constants.$muted,
);

//Default font variables
//WARNING: we are not importing fonts automatically --> use a <link> tag instead
//$font-url: "https://fonts.googleapis.com/css?family=Roboto:400,700" !default;
$fonts-scale: (
    "body": constants.$font-sans, 
    "heading": constants.$font-sans,
    "monospace": constants.$font-monospace,
);

// Default font Weight values
$font-weights-scale: (
    "body": 400,
    "heading": 700,
    "bold": 700,
);

// Default font size values
$font-sizes-scale: (
    "small": 0.875rem,
    "body": "16px",
    "large": 1.25rem,
    "huge": 2rem,
);

// Default line height values
$line-heights-scale: (
    "small": 1.25,
    "normal": normal,
    "body": 1.5,
    "heading": 1.125,
);

// Default radius values
$radius-scale: (
    "small": 0.25rem,
    "default": 0.5rem, // deprecated, use normal instead
    "normal": 0.5rem, 
    "large": 1rem,
    "circle": 50%,
);

// Default shadows
$shadows-scale: (
    "small": constants.$shadow-small,
    "normal": constants.$shadow-normal,
    "large": constants.$shadow-large,
    "none": "none",
);

// Default sizing variables
$sizes-scale: map.merge(constants.$sizes, (
    "auto": auto,
    "full": 100%,
    "half": 50%,
    "none": 0px,
    "one": 1px,
    "min": min-content,
    "max": max-content,
));

// Default spacing variables
$spacing-scale: map.merge(constants.$sizes, (
    "auto": auto,
    "full": 100%,
    "half": 50%,
    "none": 0px,
));

// Scales global map
$scales: (
    "backgrounds": $backgrounds-scale,
    "colors": $colors-scale,
    "fonts": $fonts-scale,
    "font-sizes": $font-sizes-scale,
    "font-weights": $font-weights-scale,
    "line-heights": $line-heights-scale,
    "opacities": constants.$opacities,
    "radius": $radius-scale,
    "shadows": $shadows-scale,
    "sizes": $sizes-scale,
    "spacing": $spacing-scale,
);

// @description Configure the scales used in siimple
@mixin scales ($custom-scales: null) {
    //$new-scales: utils.empty-map();
    @if not utils.is-map($custom-scales) {
        $custom-scales: utils.empty-map();
    }
    // Check default scales options
    @each $key,$value in $custom-scales {
        @if has-scale($key) {
            // Check if the value is not a vaild object --> reset the value
            @if not utils.is-map($value) {
                $value: utils.empty-map();
            }
            $scales: map.set($scales, $key, $value) !global;
        }
    }
    // Merge with custom scales
    //$scales: map.merge($scales, $new-scales) !global;
}

// @description Check if the provided key is a scale field
@function has-scale ($name: "") {
    @return map.has-key($scales, $name);
}

// @description get a scale
@function get-scale ($name) {
    @return utils.get-in($scales, $name, utils.empty-map());
}

//Get a single value from the scale
@function get-scale-value ($name, $key) {
    @return utils.get-in($scales, ($name $key), null);
}

// Use a specific value from scale as a property
@mixin use-scale ($name, $value, $important: false) {
    //$theme: $current-theme; //theme.get-current-theme();
    $properties: ($name); 
    // Check for alias -> register the same value in all aliases keys
    @if map.has-key(constants.$css-aliases, $name) {
        $properties: map.get(constants.$css-aliases, $name);
    }
    // Parse the value --> check for value in theme
    @if utils.is-string($value) {
        $prop: utils.first-item($properties);
        @if map.has-key(constants.$css-mappings, $prop) {
            $new-prop: map.get(constants.$css-mappings, $prop);
            $new-value: utils.get-in($scales, ($new-prop $value), null);
            @if $new-value != null {
                $value: $new-value; // Replace with new value
            }
        }
    }
    // Register each property
    @each $prop in $properties {
        @if $important == true {
            #{utils.unquote($prop)}: utils.unquote($value) !important;
        }
        @else {
            #{utils.unquote($prop)}: utils.unquote($value);
        }
    }
}

