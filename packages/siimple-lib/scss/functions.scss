//
// siimple-lib - core scss library for siimple
// Under the MIT LICENSE.
// License:    https://github.com/siimple/siimple/blob/develop/LICENSE.md
// Repository: https://github.com/siimple/siimple
// Website:    https://www.siimple.xyz
//

@use "./variables.scss" as variables;
@use "./lists/index.scss" as lists;
@use "./utils.scss" as utils;
@use "sass:string" as string;

//Get a color from the color palette
@function color ($color: "dark") {
    //Check for white color
    @if $color == "white" {
        @return variables.$white;
    }
    //Return the base color from the list of colors
    @return utils.utils-get(lists.$colors, "#{$color}");
}

//Make a color darker
@function color-darker ($color: "dark") {
    @return utils.utils-darken(color($color), variables.$darker-amount);
}

//Make a color lighter
@function color-lighter ($color: "dark") {
    @return utils.utils-lighten(color($color), variables.$lighter-amount);
}

//Invert a color
@function color-invert ($color) {
    @if utils.utils-is-string($color) == true {
        $color: color($color); //Get siimple color
    }
    @if utils.utils-luminance($color) > 0.55 {
        @return variables.$dark; //Return dark color
    } @else {
        @return variables.$white; //Default: white color
    }
}

//Get a breakpoint value by name
@function breakpoint ($name) {
    @return utils.utils-get(lists.$breakpoints, $name);
}

//Get a content size by name
@function content ($name) {
    @return utils.utils-get(lists.$contents, $name);
}

//Get a spacing value by name
@function spacing ($index) {
    @return utils.utils-get(lists.$spacing, $index);
}

//Get a gray color
//DEPRECATED: use light or dark instead
//Usage: gray("1") or gray("gray1")
@function gray ($name) {
    @warn "siimple.gray function has been deprecated. Please switch to siimple.light or siimple.dark instead";
    $name: "gray" + utils.utils-replace($name, "gray", "");
    @return utils.utils-get(lists.$grays, $name);
}

//Get a light color from lights list
@function light ($name) {
    $name: "light" + utils.utils-replace($name, "light", "");
    @return utils.utils-get(lists.$lights, $name);
}

//Get a dark color from darks list
@function dark ($name) {
    $name: "dark" + utils.utils-replace($name, "dark", "");
    @return utils.utils-get(lists.$darks, $name);
}

//Get a single icon by name
@function icon ($name) {
    @return utils.utils-get(lists.$icons, "#{$name}");
}

//Use an icon by name
@function use-icon($name) {
    @return string.unquote("\"") + string.unquote(string.insert(icon($name), "\\", 1)) + string.unquote("\"");
}

