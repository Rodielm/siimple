@use "sass:list";
@use "sass:map";
@use "./utils.scss" as utils;

// Internal variables
$__type: "$type";
$__types: (
    "__component", 
    "__helper",
    "__font",
    "__keyframes",
);

// @description Creates a new component with the specified options
// @param {map} options: component options
// @returns {map} component: parsed component map
@function create-component($options: null) {
    @if not $options {
        @error "create-component needs a component options map";
    }
    @if not map.has-key($options, "name") {
        @error "You should provide a valid component name";
    }
    @if not map.has-key($options, "styles") {
        @error "You should provide a valid component styles";
    }
    @if not map.has-key($options, "variants") {
        $options: map.set($options, "variants", utils.empty-map());
    }
    // Register component keys
    $options: map.set($options, $__type, list.nth($__types, 1)); 
    @return $options;
}

// Create a helper plugin
@function create-helper($options) {
    // TODO
    @return map.set($options, $__type, list.nth($__types, 2)); 
}

// Create font
@function create-font($options) {
    @if not $options {
        @error "create-font needs a font options map";
    }
    // TODO: validate font options
    $options: map.set($options, $__type, list.nth($__types, 3));
    @return $options;
}

// @description Create a new keyframes plugin
@function create-keyframes($options) {
    @if not $options {
        @error "create-keyframes needs a keyframes options map";
    }
    // TODO: validate keyframes options
    $options: map.set($options, $__type, list.nth($__types, 4));
    @return $options;
}

// @description Validates if the specified map is a valid plugin
@function is-plugin($options) {
    $type: map.get($options, $__type);
    @if not $type or not list.index($__types, $type) {
        @return false;
    }
    // Other case, it is a valid plugin
    @return true;
}

// @scope private
// @description Internal method to check if the plugin is of the specified type
@function __check-plugin-type($plugin, $index) {
    @return utils.is-map($plugin) and map.get($plugin, $__type) == list.nth($__types, $index);
}

// @description Check if the plugin is a component plugin
@function is-component-plugin($plugin) {
    @return __check-plugin-type($plugin, 1);
}

// @description Check if the plugin is a helper plugin
@function is-helper-plugin($plugin) {
    @return __check-plugin-type($plugin, 2);
}

// @description Check if the plugin is a font plugin
@function is-font-plugin($plugin) {
    @return __check-plugin-type($plugin, 3);
}

// @description Check if the plugin is a keyframes plugin
@function is-keyframes-plugin($plugin) {
    @return __check-plugin-type($plugin, 4);
}

