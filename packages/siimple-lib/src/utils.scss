@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

//Alias for lighten($color, $amount)
//https://sass-lang.com/documentation/modules/color#lighten
@function lighten-color ($color, $amount) {
   @return color.adjust($color, $lightness: $amount); 
}

//Alias for darken ($color, $amount)
//https://sass-lang.com/documentation/modules/color#darken 
@function darken-color ($color, $amount) {
    @return color.adjust($color, $lightness: -$amount);
}

//Return the luminance of a color
//From: https://css-tricks.com/snippets/sass/luminance-color-function/ 
//Reference: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef 
@function luminance ($color) {
    $colors: ("red": red($color), "green": green($color), "blue": blue($color));
    @each $name, $value in $colors {
        $adjusted: 0;
        $value: $value / 255;
        @if $value < 0.03928 {
            $value: $value / 12.92;
        } @else {
            $value: ($value + .055) / 1.055;
            //Terrible hack to calculate pow($value, 2.4)
            $value: $value * $value;
        }
        $colors: map.merge($colors, ($name: $value));
    }
    //Generate colors
    $color-red: (map.get($colors, "red") * .2126);
    $color-green: (map.get($colors, "green") * .7152);
    $color-blue: (map.get($colors, "blue") * .0722);
    @return $color-red + $color-green + $color-blue;
}

//Check if the provided value is a color
@function is-color ($value) {
    @return meta.type-of($value) == "color";
}

//Check if the provided value is a string
@function is-string ($value) {
    @return meta.type-of($value) == "string";
}

//Check if the provided value is a map
@function is-map ($value) {
    @return meta.type-of($value) == "map";
}

//Check if the provided value is a list
@function is-list ($value) {
    @return meta.type-of($value) == "list";
}

//Check if the provided value is a number
@function is-number ($value) {
    @return meta.type-of($value) == "number";
}

//Create a new map
@function create-empty-map () {
    @return map.remove(("default": null), "default");
}

//Create an empty list
@function create-empty-list () {
    @return ();
}

//Alias for map.get
@function get ($items, $key, $default-value: null) {
    //Check for map --> return the value using map.get
    @if is-map($items) == true {
        @if map.has-key($items, $key) == true {
            @return map.get($items, $key);
        }
        //Key not found --> return the default value
        @return $default-value;
    }
    //Check for list --> return the value using nth
    @if is-list($items) == true {
        //Check for empty list
        @if list.length($items) == 0 or is-number($key) == false {
            @return $default-value;
        }
        //Check if index exists
        @if 0 < $key and $key <= list.length($items) {
            @return list.nth($items, $key);
        }
        //Other case --> return the default value
        @return $default-value;
    }
    //Other type --> error
    @error "'get' method only accepts a list or a map";
}

//Alias for map.keys
@function keys ($items) {
    //Check for map --> return the list of keys using map.keys
    @if is-map($items) == true {
        @return map.keys($items);
    }
    //Check for list --> return a list: 1, 2, ... length($list)
    @if is-list($items) == true {
        $list: (); //List with indexes
        @for $i from 1 through list.length($items) {
            $list: list.append($list, $i); //Append the value
        }
        @return $list; //Return the list keys
    }
    //Otherwise: return the value provided
    @return $items;
}

//Alias for map.values
@function values ($items) {
    //Check for map --> return the list of values using map.values
    @if is-map($items) == true {
        @return map.values($items);
    }
    //Otherwise: return the value provided
    @return $list;
}

//Alias for list.length
@function length ($items) {
    //Check for list --> call list.length instead
    @if is-list($items) == true {
        @return list.length($items);
    }
    //Check for map --> return the number of items from keys
    @if is-map($items) == true {
        @return list.length(map.keys($items));
    }
    //Other type --> return 1
    @return 1;
} 

//Check if an element is included in the list or map
@function contains ($items, $key) {
    //Check for map --> use map.exists
    @if is-map($items) {
        @return map.has-key($items, $key);
    }
    //Check for list --> use list.index
    @if is-list($items) {
        @return list.index($items, $key) != null;
    }
    //Other value --> return false
    @return false;
}

//Alias for map.merge or list.merge
@function merge ($source, $target) {
    //Check for empty target --> return the source instead
    @if length($target) == 0 {
        @return $source;
    }
    //Check if both are maps
    @if is-map($source) and is-map($target) {
        @return map.merge($source, $target);
    }
    //TODO: implement list.merge for list types
    //Other --> throw error
    @error "Invalid values provided to lib.merge";
}

//String replace
@function replace($str, $search, $replace: "") {
    $index: string.index($str, $search);
    @if $index {
        $str-start: string.slice($str, 1, $index - 1);
        $str-replace: replace(string.slice($str, $index + string.length($search)), $search, $replace);
        @return $str-start + $replace + $str-replace;
    }
    //No match found --> return the original string
    @return $str;
}

//Secure string unquote
@function unquote($str) {
    @if is-string($str) == true {
        @return string.unquote($str);
    }
    //If is not string --> return the value
    @return $str;
}

//Alias for if function (if exists)
//@function if($condition, $true-value, $false-value) {
//    @if $condition == true {
//        @return $true-value;
//    }
//    @return $false-value;
//}

