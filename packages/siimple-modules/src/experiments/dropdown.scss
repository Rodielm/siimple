@use "siimple-lib" as lib;

//Dropdown loader
@mixin load-experiments-dropdown ($options: (), $prefix: lib.$prefix, $name: "dropdown") {
    .#{$prefix}#{$name} {
        @include dropdown($options);
    }
}

//Dropdown experimental component
//.#{.b$prefix}dropdown {
@mixin dropdown ($options: ()) {
    display: none;
    position: absolute;
    //top: calc(100% + #{$dropdown-offset});
    top: 100%;
    //left: 0px;
    min-width: 150px;
    color: lib.get-color("dark");
    text-align: left;
    //background-color: lib.get-color("light");
    background-color: lib.get($options, "background", lib.get-color("white"));
    border-radius: lib.$border-radius-base;
    padding: lib.get($options, "padding", 12px);
    margin: lib.get($options, "margin", 2px);
    z-index: 999; //$dropdown-zindex;
    //Dropdown arrow
    //&:before {
    //    position: absolute;
    //    width: 0px;
    //    height: 0px;
    //    content: "";
    //    display: block;
    //    border: 7px solid transparent;
    //    border-bottom-color: lib.get-color("light");
    //    top: -14px;
    //    right: 15px;
    //}
    ////Dropdown toggle arrow
    //&-toggle::after {
    //    display: inline-block;
    //    content: "";
    //    height: 0px;
    //    width: 0px;
    //    margin-left: 4px;
    //    border-top: 6px solid lib.get-color("white");
    //    border-left: 4px solid transparent;
    //    border-right: 4px solid transparent;
    //    vertical-align: middle;
    //}
    ////Toggle light color
    //&-toggle--light::after {
    //    border-top-color: lib.get-color("white");
    //}
    ////Toggle dark color
    //&-toggle--dark::after {
    //    border-top-color: lib.get-color("dark");
    //}
    //Visible dropdown 
    &.is-visible {
        display: block !important;
    }
    //Dropdown item 
    &-item {
        display: block;
        //line-height: lib.$line-height-base;
        //font-size: lib.$font-size-base;
        padding: lib.get($options, "item.padding", 12px);
        white-space: nowrap;
        cursor: pointer;
        border-radius: lib.$border-radius-base;
        //transition: all 0.3s;
        //Dropdown item hover
        &:hover {
            background-color: rgba(lib.get-color("light"), 0.5);
            //color: lib.get-color("white");
        }
    }
    //Dropdown rule separator
    &-separator {
        display: block;
        height: lib.get($options, "separator.height", 2px);
        background-color: lib.get-color-darker("light");
        margin-top: lib.get($options, "separator.margin.top", 8px);
        margin-bottom: lib.get($options, "separator.margin.bottom", 8px);
    }
    //Light dropdown
    &.is-light {
        background-color: lib.get-color("light") !important;
    }
    &.is-light &-item:hover {
        background-color: lib.get-color("white");
    }
    &.is-light &-separator {
        background-color: rgba(lib.get-color("dark"), 0.3);
    }
    //Dark dropdown 
    &.is-dark {
        background-color: lib.get-color("dark");
    }
    //&.is-dark::before {
    //    border-bottom-color: lib.get-color("dark");
    //}
    //Dark dropdown
    &.is-dark &-item {
        color: rgba(lib.get-color("white"), 0.8);
    }
    &.is-dark &-item:hover {
        background-color: rgba(lib.get-color("white"), 0.3);
    }
    //Dark separator
    &.is-dark &-separator {
        background-color: rgba(lib.get-color("white"), 0.2);
    }
    //Drowdown positions
    &.is-center {
        left: 50%;
        transform: translateX(-50%);
    }
    &.is-right { right: 0; }
    &.is-left { left: 0; }
    //Enable dropdown
    .with-dropdown {
        position: relative;
    }
    .with-dropdown:hover & {
        display: block;
    }
}


