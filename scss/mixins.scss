@use "./variables.scss" as variables;
@use "./functions.scss" as functions;
@use "./utils.scss" as utils;
@use "sass:string";
@use "sass:list";

//Set text selection
//Mixin by @icetee (PR #5) and edited by @dyzajash (PR #11)
@mixin user-select ($select: "none") {
    -webkit-user-select: string.unquote($select);
    -khtml-user-select: string.unquote($select);
    -moz-user-select: string.unquote($select);
    -ms-user-select: string.unquote($select);
    user-select: string.unquote($select);
}

//Alias for disabling user selection
@mixin disable-select () {
    @include user-select("none");
}

//Clear floated content
@mixin clearfix () {
    &::after {
        display: block;
        content: "";
        clear: both;
    }
}

//Truncate the text
//$overflow: clip, ellipsis, or a string
@mixin truncate ($overflow: "ellipsis") {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: $overflow;
}

//Striped background
@mixin striped-bg ($first-bg: transparent, $second-bg: transparent) {
    background: repeating-linear-gradient(
        45deg,
        $first-bg,
        $first-bg  7px,
        $second-bg 7px,
        $second-bg 12px
    );
}

//Fluid content size
@mixin content-fluid () {
    width: 100%;
    //width: calc(100% - #{2 * variables.$content-gap});
    padding-left: variables.$content-gap;
    padding-right: variables.$content-gap;
}

//Sizing mixin
@mixin content-size ($size: 0px) {
    //Check for string size
    @if utils.is-string($size) == true {
        $size: functions.get-content-size($size);
    }
    //Apply the provided size only in screen widts > $size
    @media screen and (min-width: $size) {
        //width: $size - 2 * variables.$content-gap;
        padding-left: calc(50% - #{$size - 2 * variables.$content-gap} / 2);
        padding-right: calc(50% - #{$size - 2 * variables.$content-gap} / 2);
    }
}

//Define a global css variable
@mixin define-variable ($name, $value) {
    --#{variables.$variable-prefix}#{$name}: #{$value};
}

//Define a property
@mixin define-property ($property, $value, $is-important: false) {
    //Check for important property --> add !important flag
    @if $is-important == true {
        #{utils.unquote($property)}: utils.unquote($value) !important;
    }
    //If is not important --> add the property without the !important flag
    @if $is-important == false {
        #{utils.unquote($property)}: utils.unquote($value);
    }
}

//Define utility rule
@mixin define-utility ($prefix, $variants...) {
    //Check for default style
    @if list.index($variants, "base") {
        @content("#{$prefix}", "");
    }
    //Check for hover 
    @if list.index($variants, "hover") {
        @content("hover\\:#{$prefix}", "\:hover");
    }
    //Check for responsive
    @if list.index($variants, "responsive") {
        @each $name,$size in variables.$breakpoints {
            @media screen and (max-width: #{$size}) {
                @content("#{$name}\\:#{$prefix}", "");
            }
        }
    }
}

//Utility mixin
@mixin utility ($prefix, $maps...) {
    @each $map in $maps {
        $name: utils.get($map, "name");
        $properties: utils.get($map, "properties");
        $variants: utils.get($map, "variants");
        //Build for each variant provided
        @include define-utility($prefix, $variants...) using ($p, $s) {
            @each $key,$value in utils.get($map, "values") {
                .#{$p}#{$name}-#{$key}#{$s} { 
                    //NOTE: we will assign the same value to all properties provided
                    @each $property in $properties {
                        @include define-property($property, $value, false); 
                    }
                }
            }
        }
    }
}


