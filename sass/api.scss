@use "sass:list";
@use "sass:map";
@use "./breakpoints.scss" as breakpoints;
@use "./constants.scss" as constants;
@use "./naming.scss" as naming;
@use "./scales.scss" as scales;
@use "./selectors.scss" as selectors;
@use "./variants.scss" as variants;
@use "./utils.scss" as utils;

// @description Build component styles
@mixin create-component ($component) {
    $sheet: sheet.create-sheet();
    $component-name: utils.get-in($component, "name", "");
    $component-classname: naming.get-component-classname($component-name);
    //$sheet: sheet.add-classname-to-sheet($sheet, $component-name, $component-classname);
    $sheet: sheet.add-styles-to-sheet($sheet, $component-classname, map.get($component, "styles"));
    //Register fonts (if provided)
    $component-fonts: utils.get-in($component, "fonts", null);
    @if utils.is-map($component-fonts) {
        @each $font-name, $font-options in $component-fonts {
            $sheet: sheet.add-font-to-sheet($sheet, $font-name, $font-options);
        }
    }
    //Register component keyframes
    $component-keyframes: utils.get-in($components, "keyframes", null);
    @if utils.is-map($component-keyframes) {
        @each $name, $keyframes in $component-keyframes {
            $sheet: sheet.add-keyframes-to-sheet($sheet, $name, $keyframes);
        }
    }
    // Compile sheet
    @include sheet.compile-sheet($sheet);
}

// @description Build a helper styles
@mixin create-helper ($helper) {
    $helper-enabled: utils.get-in($helper, "enabled", true);
    @if $helper-enabled {
        $helper-name: map.get($helper, "name");
        $helper-properties: map.get($helper, "properties");
        $helper-values: utils.empty-map();
        $helper-scale: utils.get-in($helper, "scale", null);
        $helper-important: utils.get-in($helper, "important", false);
        // Check if we need to get values from scales
        @if $helper-scale {
            @if scales.has-scale($helper-scale) {
                $helper-values: scales.get-scale($helper-scale);
            }
        }
        // Check for custom values to merge
        @if map.has-key($helper, "values") {
            $helper-values: map.merge($helper-values, map.get($helper, "values"));
        }
        $helper-responsive: utils.get-in($helper, "responsive", false);
        $helper-states: utils.get-in($helper, "states", null);
        @if not utils.is-list($helper-states) {
            $helper-states: ("default");
        }
        // Register helpers classes for each state
        @each $state in $helper-states {
            @each $key,$value in $helper-values {
                $classname: naming.get-helper-classname((
                    "name": $helper-name,
                    "property": $key,
                    "state": $state,
                ));
                //$sheet: sheet.add-styles-to-sheet($sheet, $classname, $styles);
                @include selectors.use-state-selector($classname, $state) {
                    @each $prop in $helper-properties {
                        @include scales.use-scale($prop, $value, $helper-important);
                    }
                }
            }
        }
        // For responsive variants, we will register the style
        // for each breakpoint in the list of breakpoints
        @if $helper-responsive {
            @include breakpoints.use-breakpoints using ($breakpoint) {
                @each $key,$value in $helper-values {
                    $classname: naming.get-helper-classname((
                        "name": $helper-name,
                        "property": $key,
                        "breakpoint": $breakpoint,
                    ));
                    #{$classname} {
                        @each $prop in $helper-properties {
                            @include scales.use-scale($prop, $value, $helper-important);
                        }
                    }
                }
            }
        }
    }
    //@debug map.get($sheet, "styles");
}

// @description Generate a color helper
// @mixin color-helper ($helper) {
//     //@debug $helper;
//     $helper-name: utils.get-in($helper, "name", "");
//     $helper-property: utils.get-in($helper, "property", "");
//     $helper-states: utils.get-in($helper, "states", utils.empty-list());
//     $helper-colors: utils.get-in($helper, "colors", utils.empty-map());
//     $varname: naming.get-varname("#{$helper-name}-opacity");
//     @each $state in $helper-states {
//         @each $key,$value in $helper-colors {
//             $classname: naming.get-helper-classname((
//                 "name": $helper-name,
//                 "property": $key,
//                 "state": $state,
//             ));
//             @include selectors.use-state-selector($classname, $state) {
//                 #{$varname}: 1;
//                 #{$helper-property}: rgba($value, var(#{$varname})) !important;
//             }
//         }
//     }
// }

// @description generate a variable helper
// @mixin variable-helper ($helper) {
//     $helper-name: utils.get-in($helper, "name", "");
//     $helper-states: utils.get-in($helper, "states", utils.empty-list());
//     $helper-values: utils.get-in($helper, "values", utils.empty-map());
//     $varname: naming.get-varname($helper-name);
//     @each $state in $helper-states {
//         @each $key,$value in $helper-values {
//             $classname: naming.get-helper-classname((
//                 "name": $helper-name,
//                 "property": $key,
//                 "state": $state,
//             ));
//             @include selectors.use-state-selector($classname, $state) {
//                 #{$varname}: utils.unquote($value) !important;
//             }
//         }
//     }
// }

// @description Check if the provided helper or component is enabled
@function is-enabled ($value, $include: (), $exclude: ()) {
    @if list.length($include) == 0 and list.length($exclude) == 0 {
        @return true; //No include/exclude list provided
    }
    // Check if this value is excluded
    @if list.index($exclude, $value) {
        @return false; // Icon excluded
    }
    // Check if this value is included
    @else if list.index($include, $value) {
        @return true;
    }
    // Fallback --> exclude the value
    @return false;
}
